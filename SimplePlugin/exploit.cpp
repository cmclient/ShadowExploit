#include "../plugin_sdk/plugin_sdk.hpp"
#include "exploit.h"
#include "permashow.hpp"

namespace exploit
{

	TreeTab* main_tab = nullptr;

	namespace exploit
	{
		TreeEntry* enabled = nullptr;
		TreeEntry* step_1 = nullptr;
		TreeEntry* step_2 = nullptr;
	}

	// Event handler functions
	void on_update();

	void load()
	{
		main_tab = menu->create_tab("shadowexploit", "ShadowExploit");
		{
			main_tab->add_separator("separator_1", "ShadowExploit v1.1.0");
			const auto exploit = main_tab->add_tab("exploit", "Exploit Settings");
			{
				exploit->add_separator("separator_1", "Exploit Settings");
				exploit::enabled = exploit->add_hotkey("enabled", "Exploit Status", TreeHotkeyMode::Toggle, 'H', true);

				const auto gold = exploit->add_tab("gold", "Gold Exploit");
				{
					gold->add_separator("separator_1", "Gold Exploit")v;
					exploit::step_1 = gold->add_hotkey("step_1", "Get 2 wardstones (Before lvl 13)", TreeHotkeyMode::Hold, '8', false);
					exploit::step_2 = gold->add_hotkey("step_2", "Spam selling (After lvl 13)", TreeHotkeyMode::Hold, '9', false);
					const auto tutorial = gold->add_separator("separator_2", "Hover for tutorial");
					tutorial->set_tooltip("Before level 13:\n -> Have 2200+ gold\n -> Have ur inventory in this layout:\n  -> 1 Supp Item\n  -> 2 Control Ward\n  -> 3 One Health Potion\n  -> 4-6 Fearie Charm\n->Press step 1 (8 by default) to execute\n\nAfter level 13:\n -> Make sure that you have full inventory\n -> Make sure that u get 2 wardstones from first step\n -> Make sure that you have 1000 stacks on support item\n -> Hold step 2 (9 by default) to execute");
				}
			}

			exploit->set_assigned_active(exploit::enabled);
		}

		{
			Permashow::Instance.Init(main_tab);
			Permashow::Instance.AddElement("Exploit Status", exploit::enabled);
			Permashow::Instance.AddElement("Get 2 wardstones (Before lvl 13)", exploit::step_1);
			Permashow::Instance.AddElement("Spam selling (After lvl 13)", exploit::step_2);
		}

		event_handler<events::on_update>::add_callback(on_update);

		myhero->print_chat(1, "<font color=\"#4273cf\">[ShadowExploit]</font><font color=\"#FFFFFF\">: Loaded version 1.1.0. Have Fun!");
		myhero->print_chat(1, "Gold Exploit tutorial on tooltip");
	}


	void unload()
	{
		menu->delete_tab(main_tab);
	
		Permashow::Instance.Destroy();

		event_handler<events::on_update>::remove_handler(on_update);
	}

	bool duringStepOne = false;
	bool didStepOne = false;
	bool didTwoWardstones = false;

	float last = 0.f;

	void on_update()
	{
		if (myhero->is_dead())
		{
			return;
		}

		if (!exploit::enabled->get_bool())
		{
			return;
		}

		if (exploit::step_1->get_bool())
		{
			if (myhero->get_level() >= 13)
			{
				myhero->print_chat(1, "<font color=\"#4273cf\">[ShadowExploit]</font><font color=\"#FFFFFF\">: You need level 12 or lower!");
				return;
			}

			//if (myhero->get_gold() < 2200)
			//{
			//	myhero->print_chat(1, "<font color=\"#4273cf\">[ShadowExploit]</font><font color=\"#FFFFFF\">: You need 2200 gold!");
			//	return;
			//}

			int wardstones = 0;

			for (int i = 5; i < 10; i++)
			{
				const auto item = myhero->get_item((spellslot)i);

				if (item && ((ItemId)item->get_item_id() == ItemId::Watchful_Wardstone || (ItemId)item->get_item_id() == ItemId::Vigilant_Wardstone))
				{
					wardstones++;
				}
			}

			if (wardstones >= 2) {
				didTwoWardstones = true;
				myhero->print_chat(1, "<font color=\"#4273cf\">[ShadowExploit]</font><font color=\"#FFFFFF\">: Already have 2 wardstones!");
				return;
			}

			const auto ward = myhero->has_item(ItemId::Control_Ward);
			const auto potion = myhero->has_item(ItemId::Health_Potion);

			if (ward != spellslot::invalid && potion != spellslot::invalid)
			{
				myhero->buy_item(ItemId::Watchful_Wardstone);
				scheduler->delay_action(0.0133f, [] {
					myhero->sell_item(myhero->has_item(ItemId::Health_Potion));
					myhero->sell_item(myhero->has_item(ItemId::Watchful_Wardstone));
					myhero->undo_item();
					didTwoWardstones = true;
					myhero->print_chat(1, "<font color=\"#4273cf\">[ShadowExploit]</font><font color=\"#FFFFFF\">: Completed.");
				});
			}
		}

		const float current = gametime->get_time();
		const bool has_passed = (current - last >= 0.1f);

		if (!has_passed)
		{
			return;
		}
		
		last = current;

		const spellslot vigilant = myhero->has_item(ItemId::Vigilant_Wardstone);
		const spellslot watchful = myhero->has_item(ItemId::Watchful_Wardstone);

		if (exploit::step_2->get_bool())
		{
			if (!didTwoWardstones)
			{
				int wardstones = 0;

				for (int i = 5; i < 10; i++)
				{
					const auto item = myhero->get_item((spellslot)i);

					if (item && ((ItemId)item->get_item_id() == ItemId::Watchful_Wardstone || (ItemId)item->get_item_id() == ItemId::Vigilant_Wardstone))
					{
						wardstones++;
					}
				}

				if (wardstones >= 2)
				{
					didTwoWardstones = true;
				}
				else
				{
					myhero->print_chat(1, "<font color=\"#4273cf\">[ShadowExploit]</font><font color=\"#FFFFFF\">: First do step one!");
					return;
				}
			}

			if (myhero->get_level() < 13)
			{
				myhero->print_chat(1, "<font color=\"#4273cf\">[ShadowExploit]</font><font color=\"#FFFFFF\">: You need level 13 or higher!");
				return;
			}

			const spellslot vigilant = myhero->has_item(ItemId::Vigilant_Wardstone);

			if (vigilant != spellslot::invalid)
			{
				didStepOne = true;
				myhero->sell_item(vigilant);

				scheduler->delay_action(0.25f, [] {
					const spellslot aaa = myhero->has_item(ItemId::Vigilant_Wardstone);
					myhero->sell_item(aaa);
				});
				return;
			}
		}

		if (didStepOne)
		{
			if (vigilant != spellslot::invalid && watchful == spellslot::invalid)
			{
				myhero->undo_item();
			}

			if (vigilant == spellslot::invalid && watchful == spellslot::invalid)
			{
				myhero->undo_item();
				myhero->undo_item();
			}
		}
	}
}
